#Container
#1 string             dynamic    random read 
#2 tuple              static          random read
#3 list                  dynamic    random access
#4 np.array        static          random access      
#5 dictionary    dynamic    sequencial access
#6 set                 dynamic    sequencial access

#string
A="123"
#A[1]=2
print(A[1], A*2, A+"4", len(A))

print("\nNumbers: {0} {1} {2}".format(4,5,6))
print(" ".join("Hello world"))
print("Hello world".split())
print("Hello world".replace("wor","go"))
print("Hello world".startswith("Hello"))
print("Hello world".endswith("Hello"))
print("Hello world".upper())
print("Hello world".lower())

A="Hello world"
B=""
for i in range(len(A)-1,-1,-1):
    B=B+A[i]
print(B)

import re
print(re.sub(r"David", "Bobo", "My name is David. Hi David."),"\n")

print(re.match(r"nny","sunny and funny"))
print(re.match(r"sun","sunny and funny"))
print(re.search(r"nny","sunny and funny"))
print(re.search(r"gun","sunny and funny"))
print(re.findall(r"nny","sunny and funny"), "\n")

print(re.match(r"gr.y","grey"))
print(re.match(r"gr.y","gray"))
print(re.match(r"gr.y","blue"))
print(re.match(r"^gr......y$","great day"))
print(re.match(r"9{2,3}","9"))
print(re.match(r"9{2,3}","9999"))
print(re.match(r"(9)?","9527"))                              #9{0,1}
print(re.match(r"9+","9527"),"\n")                       #9{1,}

print(re.search(r"[aeiou]","Grey"))
print(re.search(r"[aeiou]","Sky"))
print(re.search(r"[aeiou][y]","Grey"))
print(re.search(r"[aeiou][y]","Sky"))
print(re.search(r"[g-z]","Sky"))
print(re.search(r"[^A-Z]","Sky"))

import re
a=re.search(r"nny","sunny and funny")
if a:
    print(a.group(), a.start(), a.end(), a.span(), "\n")

b=re.match(r"a(bc)(de)(f(g)h)i","abcdefghijklmnop")
if b:
    print(b.group(),b.group(0))
    print(b.group(1),b.group(2),b.group(3),b.group(4))
    print(b.groups(),"\n")
    
c=re.match(r"(?P<first>abc)(?:def)(ghi)","abcdefghi")
if c:
    print(c.group("first"), c.group(1),c.group(2))
    print(c.groups(),"\n")
    
#Tuple
A=("123",456,"789")
#A[1]=123
print(A,A[1])

a,b,c=(1,2,3)
print(a,b,c)

a,*b,c=[1,2,3,4]
print(a,b,c)

#List 
A=[0, 1, 2, 3, 4, 5,  6,  7, 8, [9, "010"], "Hello"]
print(A[-1])                                                       #last element
print(A[0], A[9][1],A)
print(A[0:2],A[:1],A[1:])
print(A[0:11:3],A[11:0:-1],A[::2],A[1::4])

A=[1,2,3,3,5]
print(len(A), max(A), min(A), sum(A))
print(A+[10, 20, 30],"\n")

A.append(40)        #push back
print(A)
A.pop(1)                 #remove A[1]               
print(A)
A.insert(3,9)           #insert 9 at A[3]
print(A)
A.remove(3)          #remove "3" element
print(A)
A.sort()
print(A)
A.reverse()
print(A)

A=[2,3,4,5,6,7]
print([i**2 for i in A if i!=2])

a=False; b=False
if all([i>5 for i in A]): a=True
if any([i>5 for i in A]): b=True
print(a,b)

 #copy a local list
A = [[1,2],[3,4]]
import copy
B = copy.deepcopy(A)
A[0][0]=10
print(A,B)

#np.array
import numpy as np
A=np.array([1,2, 3])
B=np.array([1,2, 3.0])
print(A,B,2*A, A+B, A+2)
print(A.dtype, B.dtype, A.ndim, A.size)
print("Element small than 2: {0}".format(A<2))
A[A<2]=2
print(A)

C=np.array([[1,2],[3,4]])
D=np.array([[1,0],[0,1]])
print("\n",C[1][1])
print(C.dot(D))
print(C*D)
print(C.sum(), C.min(), C.max(), C.mean())
print(C.transpose())

#dictionary
data = {"Bobo": [25,167], "Baubau": [26,166]} #Bobo" is key which must be value or string.
print(data["Bobo"])                                  #error if not found
print(data.get("Baubau"))                      #print none if not found
print(data.get("ABC","Not in dict"))    #print second argument if not found
 
data["2"]=123
del data["Bobo"]
print(data)

print(123 in data)
print("2" in data)

#set
A={6,2,1,-3,1,4,6,5}
print(A)                            #sorted and no duplicate
A.add(-7)                        #add instead of append value can be negative
A.remove(4)
A.add(-5)
print(A, len(A))

A={1,2,3,4,5,6}
B={4,5,6,7,8,9}
print(A|B,"\n",A&B,"\n",A-B,"\n",A^B) #A^B symetric difference
