class student:
    def __init__(s, a, b):                      #constructor  always named __init__
        s.height=a;
        s.weight=b;
    def bark(s):
        print("woof!")

obj=student(167,54)
print(obj.height,obj.weight)
obj.bark()

class freshman(student):              #inheritance. student: superclass, freshman: subclass
    def bark2(s):
        print("woof2!")

obj=freshman(170,60)
print(obj.height,obj.weight)
obj.bark()

class vector:
    def __init__(s, x, y):
        s.x=x
        s.y=y
    def __add__(s, v):                                           #__?__ is magic method/dunder, allow + for class
        return vector(s.x+v.x, s.y+v.y)
    #sub, mul, truediv, floordiv, mod, pow, and,  xor, or
    
a=vector(1,2)
b=vector(-1,2)
res=a+b
print(res.x, res.y)

class acum:
    def __init__(s,x):
        s.x=x
    def add1(s):
        s.x+=1
    def pv(s):
        print(s.x)
        
obj=acum(0)        
for i in range(10):
    obj.add1()
obj.pv()

class rec:
    def __init__(s,wid,hei):
        s.wid=wid
        s.hei=hei
    def cal(s):
        print(s.wid*s.hei)
    
    @classmethod                 #define another class creation
    def square(s,leng):
        return s(leng,leng)
    
    @staticmethod                #function without "s"
    def fun():
        print("static method")
    
    @property                        #function be called without () 
    def fun2(s):
        print("property")
    
obj=rec.square(5)
obj.cal()
obj.fun()
obj.fun2


print( len(dir(rec)), hasattr(rec,'__name__'), rec.__name__, rec.cal.__doc__)
import math
print(dir(math))
help(math.log1p)
