"""
# Definition for a Node.
class Node:
    def __init__(self, val, neighbors):
        self.val = val
        self.neighbors = neighbors
"""
class Solution:
    
    stack = []
    DFSval = []
    
    def DFS(G):
        if G==None:
            return
        if G.neighbors==None:
            Solution.DFSval.append(G.val)
            G.val = -1
            return
        if G.val != -1:
            Solution.DFSval.append(G.val)
            G.val = -1
            for i in G.neighbors:
                if i.val != -1:
                    Solution.stack.append(i)
            for i in Solution.stack:
                item = Solution.stack.pop()
                Solution.DFS(item)
    
    queue = []
    BFSval = []
    
    def BFS(G):
        if G==None:
            return
        if G.neighbors==None:
            Solution.BFSval.append(G.val)
            G.val = -1
            return
        if G.val != -1:
            Solution.BFSval.append(G.val)
            G.val = -1
            for i in G.neighbors:
                if i.val != -1:
                    Solution.queue.append(i)
            for i in Solution.queue:
                Solution.queue.remove(i)
                Solution.BFS(i)
                
    def cloneGraph(self, node: 'Node') -> 'Node':
        
        # BFS
        #Solution.queue = []
        #Solution.BFS(node)
        #print(Solution.BFSval)
        
        # DFS
        Solution.stack = []
        Solution.DFS(node)
        print(Solution.DFSval) 
        
